
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

#Cargando modulos lua
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections  1024;
}

http {
    
    # Establecemos las rutas de búsqueda para bibliotecas externas Lua puras
    lua_package_path "/etc/nginx/lua-plugins/lua-resty-string/lib/?.lua;/etc/nginx/lua-plugins/lua-resty-hmac/lib/?.lua;/etc/nginx/lua-plugins/lua-resty-redis/lib/?.lua;/etc/nginx/lua-plugins/lua-resty-jwt/lib/?.lua;;";

    # Establecemos las rutas de búsqueda para bibliotecas externas de Lua escritas en C
    lua_package_cpath "/usr/local/lib/lua/5.1/?.so;;";

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    

    # Después de validar el JWT, NGINX Plus tiene acceso a todos los campos presentes en el encabezado y la carga útil como variables. 
    # Se accede a ellos mediante el prefijo $jwt_header_ $jwt_claim_ al campo deseado 
    # (por ejemplo, $jwt_claim_sub para el sub del payload)
    # log_format define un nuevo formato llamado jwt que extiende el formato de registro común con dos campos adicionales
    # $jwt_header_alg y $jwt_claim_sub
    # Dentro de un bloque /location usamos la directiva access_log para escribir registros con los valores obtenidos del JWT validado

    log_format  jwt   '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                      '$jwt_header_alg $jwt_claim_sub';


    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}


# TCP/UDP proxy and load balancing block
#
#stream {
    # Example configuration for TCP load balancing

    #upstream stream_backend {
    #    zone tcp_servers 64k;
    #    server backend1.example.com:12345;
    #    server backend2.example.com:12345;
    #}

    #server {
    #    listen 12345;
    #    status_zone tcp_server;
    #    proxy_pass stream_backend;
    #}
#}
