server {
    listen       8080 default_server;
    server_name  localhost;

    error_log    /var/log/nginx/api-gateway-error.log debug;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        default_type text/html;
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }



    location /jwt {


        # El modelo de autenticacion es simple:
        # Nginx autentica al cliente de acuerdo al token enviado, para esto decodifica el token
        # obtiene el key ID y lo busca en su  lista de JWK para obtener la clave publica.
        # con clave publica verifica firma del JWT, si verificacion es satisfactoria
        # pasa el request al endpoint del API solicitado.

        # auth_jwt Habilita la validación de JSON Web Token
        # y define el dominio de autenticación que se devolverá
        # (junto con un código 401 de estado) si la autenticación no tiene éxito.
        auth_jwt "API BUKAKE";

        # auth_jwt_key_file Le dice a NGINX Plus cómo validar el elemento de firma del JWT
        # En este ejemplo, estamos utilizando el algoritmo HMAC SHA-256 para firmar JWT
        # por lo que debemos crear una clave web JSON en conf/api_secret.jwk para que contenga
        # la clave simétrica utilizada para la firma
        auth_jwt_key_file conf/api_secret.jwk;

        # access_log Escribe registros con los valores obtenidos del JWT validado usando el format_log jwt definido en el bloque http
        access_log /var/log/nginx/access_jwt.log jwt;

        # proxy_pass http://virtualnginx:8080;

    }

    location /lua_content {

        # Este location utiliza codigo lua para pintar un Hello World

        # MIME type determined by default_type:
        default_type 'text/plain';

        content_by_lua_block {
            ngx.say('Hello,world!')
            ngx.say("true, kid del nginx ("..ngx.var.var_header_kid..") SI coincide con el kid del redis ("..ngx.var.rediskid..")")
        }
    }


    location /lua_content2 {

        # Este location utiliza codigo lua para pintar un Hello World

        # MIME type determined by default_type:
        default_type 'text/plain';

        content_by_lua_block {
            ngx.say('Bye,world!')
            ngx.say("false, kid del nginx ("..ngx.var.var_header_kid..") NO coincide con el kid del redis ("..ngx.var.rediskid..")")
        }
    }

    location /tokentojson {

        # Este location utiliza un codigo lua para desencriptar un jwt y almanecarlo en una variable y pintarlo en el body

        content_by_lua '
            -- Cargamos las librerias necesarias
            local cjson = require "cjson"
            local jwt = require "resty.jwt"

            -- Asignamos un token a una variable local lua
            local jwt_token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" ..
                  ".eyJmb28iOiJiYXIifQ" ..
                  ".VAoRL1IU0nOguxURF2ZcKR0SGKE1gCbqwyh8u2MLAyY"

            -- Verificamos que la estructura (header-payload-signature)
            local jwt_obj = jwt:verify("lua-resty-jwt", jwt_token)

            -- Con encode convertimos, codificamos  el token que es un string en un json string
            -- (encode devuelve un string)
            -- (decode se puede utilizar para convertir ese string en un objeto json y acceder a sus propiedades)
            local encode = cjson.encode(jwt_obj)

            -- Pintamos el json string
            ngx.say(encode)
            ';
    }

    location /jsontotoken {

        # Este location utiliza un codigo lua para encriptar un jwt y almanecarlo en una variable y pintarlo en el body

        content_by_lua '
            local cjson = require "cjson"
            local jwt = require "resty.jwt"

            -- Con jwt convertimos un json string en un token string
            local jwt_token = jwt:sign(
                  "lua-resty-jwt",
                  {
                      header={typ="JWT", alg="HS256"},
                      payload={foo="bar"}
                  }
            )
            ngx.say(jwt_token)
        ';
    }

    location /novar {

        # Este location utiliza un BLOQUE de codigo lua para pintar variables definidas previamente en nginx

        default_type 'text/plain';
        content_by_lua_block {

            -- Asignamos una variable de nginx a una variable local en lua
            -- En este ejemplo no se pinta el valor la variable var_thing porque esta existe en el entorno global en el location /var
            -- pero no se le ha asignado un valor en este location
            -- a diferencia de undefined_var que no ha sido definida en ningun lado y tampoco se le ha asignado un valor
            local ngx_var = ngx.var.var_thing;
            local ngx_undef = ngx.var.undefined_var;

            ngx.say('var_thing is type: ' .. type(ngx_var))
            ngx.say('var_thing contains: ' .. tostring(ngx_var))

            ngx.say('undefined_var is type: ' .. type(ngx_undef))
            ngx.say('undefined_var contains: ' .. tostring(ngx_undef))
        }
    }

    location /var {

        # Este location utiliza un ARCHIVO de codigo lua para pintar variables definidas previamente en nginx
        # En este ejemplo si pinta la variable porque no ha sido definida en el nginx

        default_type 'text/plain';

        set $var_thing "test";
        content_by_lua_file '/etc/nginx/lua-files/vartest.lua';
    }

################################################
    location /jwtcheckgetredis {

        # Este location valida el token y utiliza un ARCHIVO de codigo lua para conectarte al redis, obtener el kid, asignarlo
        # a una variable nginx (para que este disponible desde el otro location) y redirecciona al location /kidcheck

        default_type 'text/plain';

        auth_jwt "API BUKAKE";
        auth_jwt_key_file conf/api_secret.jwk;

        set $rediskid "";
        content_by_lua_file '/etc/nginx/lua-files/getrediskid.lua';
    }

    location /kidcheck {

        # Este location asigna los datos obtenidos del json que llego al location /jwtcheckgetredis a otras variables
        # (accion redundante ya que se podrian utilizar las mismas variables jwt_header_* y $jwt_claim_*)
        # y utiliza un ARCHIVO de codigo lua para comparar el kid del token con el kid del redis
        # (obtenido por el location /jwtcheckgetredis)
        # en base a la comparacion lo redirecciona si OK a /lua_content si NO OK a /lua_content2

        default_type 'text/plain';

        set $var_header_alg $jwt_header_alg;
        set $var_header_kid $jwt_header_kid;
        set $var_payload_sub $jwt_claim_sub;
        set $var_payload_iss $jwt_claim_iss;

        content_by_lua_file '/etc/nginx/lua-files/redirectlocation.lua';
    }
##################################################

    location /jwtcheckfinal {

        # Este location valida el token y utiliza un ARCHIVO de codigo lua para
        # obtener el json
        # obtener el kid y la aud obtenida del token
        # Pintamos el token string en json string con cjson
        # Pintamos los datos en pantalla

        default_type 'text/plain';
        auth_jwt "API BUKAKE";
        auth_jwt_key_file conf/api_secret.jwk;

        # set $rediskid "";
        content_by_lua_file '/etc/nginx/lua-files/tokencheck.lua';
    }



    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}

    # enable /api/ location with appropriate access control in order
    # to make use of NGINX Plus API
    #
    #location /api/ {
    #    api write=on;
    #    allow 127.0.0.1;
    #    deny all;
    #}

    # enable NGINX Plus Dashboard; requires /api/ location to be
    # enabled and appropriate access control for remote access
    #
    #location = /dashboard.html {
    #    root /usr/share/nginx/html;
    #}
}

